syntax = "proto2";

package protocol;

import "wear_common.proto";

enum ResultType {
    START_LISTENING = 0;
    END_LISTENING = 1;
    RECOGNIZE_RESULT = 2;
    STOP_CAPTURE = 3;
    DIALOG_FINISH = 4;
    SYSTEM_TRUNCATIONNOTIFICATION = 5;
    ERROR_NETWORK = 80;
    ERROR_AUTH = 81;
    ERROR_TOO_MANY_DEVICES = 82;
    ERROR_CONTENT_TOO_LONG = 83;
    AIVS_ERROR_ASR_TIMEOUT = 112;
    AIVS_ERROR_TTS_TIMEOUT = 113;
    ERROR_CONNECT_TIMEOUT = 84;
    ERROR_AUDIO_EMPTY = 85;
    ERROR_SUBSCRIPTION_EXPIRED = 86;
    ERROR_TODAY_FREE_COUNT_LIMIT = 87;
    ERROR_ALL_FREE_COUNT_LIMIT = 88;
    ERROR_SENSATIVE_CONTENT = 89;
    ERROR_UNSUPPORT_LANGUAGE = 90;
    ERROR_UNKNOWN = 91;
    TEMPLATE_TOAST = 256;
    TEMPLATE_GENERAL = 257;
    TEMPLATE_GENERAL2 = 258;
    TEMPLATE_WEATHER = 259;
    TEMPLATE_PLAYINFO = 260;
    TEMPLATE_LISTS = 261;
    TEMPLATE_SWITCHPANEL = 262;
    ALERTS_SETALERT = 263;
    SPEECHSYNTHESIZER_SPEAK = 264;
    SPEECHRECOGNIZER_EXPECTSPEECH = 265;
    LAUNCHER_LAUNCHAPP = 266;
    TEMPLATE_SWITCHPANELLIST = 267;
    BRIGHTNESSCONTROLLER_ADJUSTBRIGHTNESS = 268;
    SYSTEM_SETPROPERTY = 269;
    APPLICATION_OPERATE = 270;
    ALERTS_DELIVERALERTINTENTION = 271;
    ALERTS_STOPALERT = 272;
    PLAYBACKCONTROLLER = 273;
    PLAYBACKCONTROLLER_STOP = 274;
    PLAYBACKCONTROLLER_PLAY = 275;
    PLAYBACKCONTROLLER_PAUSE = 276;
    PLAYBACKCONTROLLER_NEXT = 277;
    PLAYBACKCONTROLLER_PREV = 278;
    PLAYBACKCONTROLLER_CONTINUEPLAYING = 279;
    SPEAKER_SETMUTE = 280;
    SPEAKER_SETVOLUME = 281;
    SPEAKER_AJUSTVOLUME = 282;
    TEMPLATE_DEVICELIST = 283;
    EXECUTE_DEVICESKILL = 284;
    SHOW_CONTACTS = 285;
    MAKE_CALL = 286;
    WEARABLE_CONTROLLER_SWITCH = 287;
    WEARABLE_CONTROLLER_EXECUTE = 288;
    WEARABLE_CONTROLLER_ACTION = 294;
    LLM_LOADING_CARD = 289;
    LLM_DECLARATION_CONTENT = 290;
    LLM_ILLEGAL_CONTENT = 291;
    LLM_TOAST_STREAM = 292;
    LLM_FINISH_STREAM = 293;
}

enum ApplictionOp {
    ApplictionOp_UNKNOWN = -1;
    ApplictionOp_OPEN = 0;
    ApplictionOp_INSTALL = 1;
    ApplictionOp_UNINSTALL = 2;
    ApplictionOp_CLOSE = 3;
    ApplictionOp_SEARCH = 4;
}

enum PlayInfoType {
    PIT_UNKNOWN = -1;
    JOKE = 0;
    POEM = 1;
    MUSIC = 2;
    STATION = 3;
    VOICE_NEWS = 4;
    SOUND = 5;
    TRANSLATION = 6;
}

enum SwitchPanelType {
    SwitchPanelType_UNKNOWN = -1;
    DEFAULT = 0;
    COUNTDOWN = 1;
}

enum AlertType {
    AlertType_UNKNOWN = -1;
    ALARM = 0;
    REMINDER = 1;
    TIMER = 2;
}

enum AlertCircleType {
    AlertCircleType_UNKNOWN = -1;
    ONCE = 0;
    EVERYDAY = 1;
    WORKDAY = 2;
    MONDAY_TO_FRIDAY = 3;
    HOLIDAY = 4;
    WEEKEND = 5;
    WEEKLY = 6;
    MONTHLY = 7;
    YEARLY = 8;
}

enum AlertOperation {
    AlertOperation_UNKNOWN = -1;
    OPEN = 0;
    CLOSE = 1;
    PAUSE = 2;
    PROCEED = 3;
    QUERY = 4;
    DELETE = 5;
}

enum AlertFilterType {
    ALERTFILTER_UNKNOWN = -1;
    ALERTFILTER_RECENTLY_SET = 0;
    ALERTFILTER_RECENTLY_CALL = 1;
    ALERTFILTER_ON_STATUS = 2;
    ALERTFILTER_OFF_STATUS = 3;
}

enum AlertTimeType {
    ALERTTIME_UNKNOWN = -1;
    ALERTTIME_DATETIME = 0;
    ALERTTIME_DURATION = 1;
    ALERTTIME_OFFSET = 2;
    ALERTTIME_INDETER_DATETIME = 3;
}

enum MediaErrorType {
    Media_ERROR_OK = 0;
    Media_ERROR_UNSUPPORT_SYSTEM = 1;
    Media_ERROR_NO_PERMISSION = 2;
    Media_ERROR_NO_MUSIC = 3;
    Media_ERROR_ALREADY_PLAYING_ON_PLAY = 4;
    Media_ERROR_ALREADY_PAUSED_ON_PAUSE = 5;
    Media_ERROR_ALREADY_MAX_ON_RAISE_VOLUME = 6;
    Media_ERROR_ALREADY_MIN_ON_LOWER_VOLUME = 7;
    Media_ERROR_ALREADY_PAUSED_ON_ADJUST_VOLUME = 8;
    Media_ERROR_ALREADY_PAUSED_ON_SET_VOLUME = 9;
    Media_ERROR_ALREADY_PAUSED_ON_SET_MUTE = 10;
}

enum SpeakerVolumeType {
    Speaker_VOLUME_UNKNOWN = -1;
    Speaker_VOLUME_MEDIA = 0;
    Speaker_VOLUME_RING = 1;
    Speaker_VOLUME_NOTIFICATION = 2;
    Speaker_VOLUME_VOICE_ASSISTANT = 3;
    Speaker_VOLUME_ALARM = 4;
}

enum SpeakerUnitDef {
    Speaker_UNIT_UNKNOWN = -1;
    Speaker_UNIT_PERCENT = 0;
    Speaker_UNIT_ABSOLUTE = 1;
}

message Aivs {

    enum AivsID {
        SYNC_INSTRUCTION_LIST = 0;
        GET_CONFIG = 1;
        SET_CONFIG = 2;
        GET_MEDIA_CONFIG = 3;
        REQUEST_MULTI_MODAL = 4;
        SYNC_AIVS_STATUS = 5;
        SYNC_AIVS_ERROR = 6;
        GET_AFLASH_SUPPORTED_LANGUAGE = 7;
        REPLY_AFLASH_CONFIRM_RESULT = 8;
        LLM_ISSUE_IMAGE = 9;
    }

    oneof payload {
        AivsInstruction.List instruction_list = 1;
        AivsConfig aivs_config = 2;
        MediaConfig image_config = 3;
        MultiModal multi_model = 4;
        AivsStatus aivs_status = 5;
        AivsError aivs_error = 6;
        AFlash.SupportedLanguage aflash_supported_language = 7;
        AFlash.ConfirmResult aflash_confirm_result = 8;
        LLM.IssueImage.Request llm_image_request = 9;
        LLM.IssueImage.Response llm_image_response = 10;
    }
}

message AivsConfig {
    required bool enable_tts = 1;
}

message AivsInstruction {

    message List {
        repeated AivsInstruction list = 1;
    }

    required ResultType result_type = 1;
    required uint32 session_id = 13;
    optional SpeechRecognizeResult recognize_result = 2;
    optional TemplateToast template_toast = 3;
    optional TemplateGeneral template_general = 4;
    optional TemplateGeneral2 template_general2 = 5;
    optional TemplateWeather template_weather = 6;
    optional TemplatePlayInfo template_playinfo = 7;
    optional TemplateLists template_lists = 8;
    optional TemplateSwitchPanel template_switchpanel = 9;
    optional AlertsSetAlert alerts_setalert = 10;
    optional SpeechSynthesizerSpeak speechsynthesizer_speak = 11;
    optional LauncherLaunchApp laucher_lauchapp = 14;
    optional TemplateSwitchPanelList template_switchpanellist = 15;
    optional BrightnessControllerAjustBrightness brightnesscontroller_ajustbrightness = 16;
    optional SystemSetProperty system_setproperty = 17;
    optional ApplicationOperate application_operate = 18;
    optional AlertsDeliverAlertIntention alerts_deliveralertintention = 19;
    optional MediaErrorType media_errortype = 20;
    optional SpeakerSetMute speaker_setmute = 21;
    optional SpeakerSetVolume speaker_setvolume = 22;
    optional SpeakerAjustVolume speaker_ajustvolume = 23;
    optional TemplateDeviceList template_devicelist = 24;
    optional ExecuteDeviceSkill execute_deviceskill = 25;
    optional ShowContacts show_contacts = 26;
    optional ShowContacts.ContactData contact_data = 27;
    optional WearableController.Switch wearable_controller_switch  = 28;
    optional WearableController.Execute wearable_controller_execute = 29;
    optional LLM.LoadingCard llm_loading_card = 30;
    optional LLM.DeclarationContent llm_declaration_content = 31;
    optional LLM.IllegalContent llm_illegal_content = 32;
    optional LLM.ToastStream llm_toast_stream = 33;
    optional WearableController.Action wearable_controller_action = 34;
}

message SpeechRecognizeResult {
    required bool is_final = 1;
    required SpeechRecognizeResultItem.List results = 2;
}

message TemplateToast {
    required string text = 1;
}

message TemplateGeneral {
    required Title title = 1;
    required string text = 2;
    optional AbstractItem.List results = 3;
    required string skill_description = 4;
}

message TemplateGeneral2 {
    required RichText main_title = 1;
    required RichText.List sub_titles = 2;
    required RichText.List texts = 3;
    required string skill_description = 4;
}

message TemplateWeather {
    required WeatherItem.List weather = 1;
    required string skill_description = 2;
}

message TemplatePlayInfo {
    required PlayInfoItem.List items = 1;
    required PlayInfoType type = 2;
    required string skill_description = 3;
}

message TemplateLists {
    required string skill_description = 1;
    required ListsItem.List items = 2;
    optional Title title = 3;
}

message TemplateSwitchPanel {
    required Title title = 1;
    required string skill_description = 2;
    required string status = 3;
    optional SwitchPanelType type = 4;
}

message TemplateSwitchPanelList {
    required SwitchItem.List titles = 1;
    required string skill_description = 2;
    optional SwitchPanelType type = 3;
    optional SwitchItem.List items = 4;
}

message SwitchItem {

    message List {
        repeated SwitchItem list = 1;
    }
    
    required Title title = 1;
    required string status = 2;
}

message AlertsSetAlert {
    required string id = 1;
    required AlertType type = 2;
    required string datetime = 3;
    optional AlertCircleType circle = 4;
    required string circle_extra = 5;
    required string offset = 6;
    required string event = 7;
}

message AlertsDeliverAlertIntention {
    required AlertType type = 1;
    required AlertOperation operation = 2;
    required bool operate_all = 3;
    optional AlertCircleType circle = 4;
    required string circle_extra = 5;
    required string event = 6;
    optional AlertFilterType filter_type = 7;
    optional AlertTimeInfo time = 8;
}

message SpeechSynthesizerSpeak {
    required string text = 1;
}

message SpeechRecognizeResultItem {

    message List {
        repeated SpeechRecognizeResultItem list = 1;
    }

    required string text = 1;
}

message SystemSetProperty {
    required string name = 1;
    required string value = 2;
}

message LauncherLaunchApp {
    required AndroidIntent intent = 1;
}

message ExecuteDeviceSkill {
    required AndroidIntent intent = 1;
}

message BrightnessControllerAjustBrightness {
    required int32 brightness_delta = 1;
}

message ApplicationOperate {
    required ApplictionOp operation = 1;
    required string keyword = 2;
    required string app_pkg_name = 3;
}

message AndroidIntent {
    required string pkg_name = 1;
    required string uri = 2;
}

message AbstractItem {

    message List {
        repeated AbstractItem list = 1;
    }

    required string k = 1;
    required string v = 2;
}

message Title {
    required string main_title = 1;
    required string sub_title = 2;
}

message RichText {

    message List {
        repeated RichText list = 1;
    }

    required string text = 1;
    required string color = 2;
    required string bg_color = 3;
}

message WeatherItem {

    message List {
        repeated WeatherItem list = 1;
    }

    required string date = 1;
    required string location = 2;
    required string aqi = 3;
    required string current_temperature = 4;
    required string high_temperature = 5;
    required string low_temperature = 6;
    required string icon_description = 7;
    optional WeatherCode weather_code = 8;
    optional WeatherWind wind = 9;
    required string weekday = 10;
}

message WeatherCode {
    required string current = 1;
    required string from = 2;
    required string to = 3;
}

message WeatherWind {
    optional WeatherWindDirection direction = 1;
    optional WeatherWindSpeed speed = 2;
}

message WeatherWindDirection {
    required string text = 1;
    required string current = 2;
    required string from = 3;
    required string to = 4;
}

message WeatherWindSpeed {
    required string text = 1;
    required string current = 2;
    required string from = 3;
    required string to = 4;
}

message PlayInfoItem {

    message List {
        repeated PlayInfoItem list = 1;
    }
    
    required Title title = 1;
    optional uint32 duration_in_ms = 2;
    required string text = 3;
}

message ListsItem {

    message List {
        repeated ListsItem list = 1;
    }

    required Title title = 1;
    required string text = 2;
    required string skill_description = 3;
}

message AlertTimeInfo {
    required AlertTimeType type = 1;
    required string token = 2;
    optional AlertDateTime datetime = 3;
    optional AlertDateTime start_datetime = 4;
    optional AlertDateTime end_datetime = 5;
}

message AlertDateTime {
    required string value = 1;
    required int64 timestamp = 2;
}

message SpeakerSetMute {
    required bool mute = 1;
}

message SpeakerSetVolume {
    required int32 volume = 1;
    required SpeakerVolumeType type = 2;
    required SpeakerUnitDef unit = 3;
    optional bool once = 4;
}

message SpeakerAjustVolume {
    required int32 volume_delta = 1;
    required SpeakerVolumeType type = 2;
    required SpeakerUnitDef unit = 3;
}

message TemplateDeviceList {
    required DeviceItem.List items = 1;
    required bool exceed_max_items = 2;
    required bool show_index = 3;
}

message DeviceItem {

    message List {
        repeated DeviceItem list = 1;
    }

    required Title title = 1;
}

message ShowContacts {

    enum Code {
        OK = 0;
        NO_PERMISSION = 1;
    }

    message ContactData {
        required string name = 1;
        required string number = 2;
    }

    required Code code = 1;
    repeated ContactData list = 2;
}

message WearableController {

    message Switch {
        required SportState sport_state = 1;
        required SportType sport_type = 2;
    }

    message Execute {
        required string directive = 1;
    }

    message Action {
        required string name = 1;
        required string payload = 2;
    }

}

message LLM {
    
    message LoadingCard {
        required uint32 timeout = 1;
    }

    message DeclarationContent {
        required string text = 1;
    }

    message IllegalContent {
        required string text = 1;
    }

    message ToastStream {
        required string markdown_text = 1;
    }

    message IssueImage {

        message Request {
            required uint32 session_id = 1;
        }

        message Response {
            required PrepareStatus prepare_status = 1;
            optional ImageFormat support_image_format = 2;
            optional uint32 expected_slice_length = 3;
        }

    }

}

message MediaConfig {
    required uint32 img_width = 1;
    required uint32 img_height = 2;
    required uint32 img_format = 3;
    required uint32 standby_freq = 4;
}

message AivsRequestInfo {
    required bytes request_id = 1;
    required bytes transaction_id = 2;
}

message MultiModal {
    required AivsRequestInfo request_info = 1;
    required uint32 cmd = 2;
}

message AivsStatus {

    enum VoiceStatus {
        VOICE_IDLE = 0;
        WAKE_UP = 1;
        RECORDING = 2;
        STANDBY = 3;
    }

    enum TtsStatus {
        TTS_IDLE = 0;
        TTS_PLAYING = 1;
    }

    enum MediaPlayStatus {
        MEDIA_IDLE = 0;
        MEDIA_PLAYING = 1;
        MEDIA_PAUSED = 2;
        MEDIA_STOPPED = 3;
    }

    enum ImageStatus {
        IMAGE_IDLE = 0;
        IMAGE_PREPARE = 1;
        IMAGE_UPLOADING = 2;
    }

    enum OperatingStatus {
        OPERATING_IDLE = 0;
        EXECUTING = 1;
    }

    enum DeviceStatus {
        CONNECTED_ONLINE = 0;
        CONNECTED_OFFLINE = 1;
        DISCONNECTED_OFFLINE = 2;
    }

    required VoiceStatus voice_status = 1;
    required TtsStatus tts_status = 2;
    required MediaPlayStatus media_play_status = 3;
    required ImageStatus image_status = 4;
    required OperatingStatus operating_status = 5;
    required DeviceStatus device_status = 6;
}

message AivsError {
    required uint32 error_code = 1;
    required string error_msg = 2;
}

message AFlash {

    enum Scene {
        QUESTION_AND_ANSWER = 0;
        TEXT_TO_IMAGE = 1;
    }

    message SupportedLanguage {
        required string languages = 1;
    }

    message ConfirmResult {

        message AlbumWF {
            required string id = 1;
            required ImageFormat image_format = 2;
        }

        required Scene scene = 1;
        required bool confirm = 2;
        required string content = 3;
        optional AlbumWF album_wf = 4;
    }

}